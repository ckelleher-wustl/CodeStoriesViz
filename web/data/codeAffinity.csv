begin,end,matches,target code,comp code
56,94,0,[''],['']
94,110,0,[''],"[""// 640px, 1150px, 1400px\n\n $breakpoints-up: (\n 'medium': '40em',\n 'large': '71.875em',\n 'xlarge': '87.5em',\n);\n\n// 639px, 1149px, 1399px\n$breakpoints-down: (\n'small': '39.9375em',\n'medium': '71.8125em',\n'large': '87.4375em',\n);\n\n@mixin breakpoint ($size) {\n""]"
110,120,0,"[""// 640px, 1150px, 1400px\n\n $breakpoints-up: (\n 'medium': '40em',\n 'large': '71.875em',\n 'xlarge': '87.5em',\n);\n\n// 639px, 1149px, 1399px\n$breakpoints-down: (\n'small': '39.9375em',\n'medium': '71.8125em',\n'large': '87.4375em',\n);\n\n@mixin breakpoint ($size) {\n""]",['']
120,139,0,[''],['']
139,143,0,[''],['']
143,220,0,[''],['']
220,345,0,[''],['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\n## Interactions\n']
345,349,0,['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\n## Interactions\n'],['']
349,406,0,[''],['']
406,486,0,[''],['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\nTiles 5x6 \nVirtual keyboard\n\n## Interactions\n']
486,514,9,['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\nTiles 5x6 \nVirtual keyboard\n\n## Interactions\n'],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']"
514,516,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']",['']
516,536,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\nEnter will submit guess\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']"
536,539,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\nEnter will submit guess\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']",['']
539,630,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display [he letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuess colors:\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray']"
630,631,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display [he letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuess colors:\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray']",['']
631,638,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']"
638,642,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']",['']
642,678,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n\n## Design\n\nTiles 5x6 \nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']"
678,682,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\n\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\n\n## Design\n\nTiles 5x6 \nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']",['']
682,720,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']"
720,721,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n']",['']
721,779,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
779,874,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
874,989,0,[''],['']
989,1043,0,[''],['']
1043,1052,0,[''],['']
1052,1056,0,[''],['']
1056,1073,0,[''],['']
1073,1076,0,[''],['']
1076,1126,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Website generated by Gulp and Sass Boilerplate Generator!</h1>\n  </body>\n</html>\n']"
1126,1128,19,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Website generated by Gulp and Sass Boilerplate Generator!</h1>\n  </body>\n</html>\n']","['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Website generated by Gulp and Sass Boilerplate Generator!</h1>\n  </body>\n</html>\n']"
1128,1137,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Website generated by Gulp and Sass Boilerplate Generator!</h1>\n  </body>\n</html>\n']","[""@use 'globals';\n@use 'components';\n""]"
1137,1145,0,"[""@use 'globals';\n@use 'components';\n""]","['html {\n  font-size: 100%;\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n}\n']"
1145,1147,3,"['html {\n  font-size: 100%;\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n}\n']","[':root {\n--white: hsl(0, 0%, 100%);\n--black: hsl(0, 0%, 0%);\n}']"
1147,1155,1,"[':root {\n--white: hsl(0, 0%, 100%);\n--black: hsl(0, 0%, 0%);\n}']","[""@use '../util'’ as *;\n\n.container {\n  padding: 0 rem(24);\n  max-width: rem(1110) ;\n  margin: 0 auto;\n\n  @include breakpoint(large) {\n  padding: 0;\n  transform: translate(0, 0);\n  }\n}\n""]"
1155,1173,2,"[""@use '../util'’ as *;\n\n.container {\n  padding: 0 rem(24);\n  max-width: rem(1110) ;\n  margin: 0 auto;\n\n  @include breakpoint(large) {\n  padding: 0;\n  transform: translate(0, 0);\n  }\n}\n""]","['root {\n--font-body: Arial, sans-serif;\n}\n']"
1173,1182,0,"['root {\n--font-body: Arial, sans-serif;\n}\n']",['']
1182,1262,0,[''],['']
1262,1279,0,[''],"["":root {\n--font-body: ‘Open Sans', Arial, sans-serif;\n}\n""]"
1279,1306,1,"["":root {\n--font-body: ‘Open Sans', Arial, sans-serif;\n}\n""]","['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\nbox-sizing: inherit;\n\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n']"
1306,1314,0,"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\nbox-sizing: inherit;\n\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n']",['']
1314,1327,0,[''],['']
1327,1385,0,[''],"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\nbox-sizing: inherit;\n\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 108%);\n}']"
1385,1391,0,"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\nbox-sizing: inherit;\n\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 108%);\n}']",['']
1391,1436,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>  \n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      \n    </section>\n\n    <section class=""keyboard"">\n      \n    </section>\n  </body>\n</html>']"
1436,1448,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>  \n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      \n    </section>\n\n    <section class=""keyboard"">\n      \n    </section>\n  </body>\n</html>']",['']
1448,1472,0,[''],"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 108%);\n  justify-content: center;\n}']"
1472,1477,0,"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 108%);\n  justify-content: center;\n}']",['']
1477,1487,0,[''],"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n}\n']"
1487,1488,0,"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n}\n']",['']
1488,1506,0,[''],['']
1506,1547,0,[''],"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: rem(36);\n}\n']"
1547,1595,21,"['html {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: rem(36);\n}\n']","[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: rem(36);\n}\n""]"
1595,1629,0,"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: rem(36);\n}\n""]",['']
1629,1661,0,[''],"[""@use '../util’ as *;\n\nh1,\nh2,\nh3 {\n  margin-top: 0;\n  line-height: 1.1;\n} \n\nh1 {\n  font-size: rem(36);\n}\n\na,\na:visited,\n""]"
1661,1670,0,"[""@use '../util’ as *;\n\nh1,\nh2,\nh3 {\n  margin-top: 0;\n  line-height: 1.1;\n} \n\nh1 {\n  font-size: rem(36);\n}\n\na,\na:visited,\n""]",['']
1670,1829,0,[''],"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n""]"
1829,1830,0,"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n""]",['']
1830,1836,0,[''],"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n""]"
1836,1840,0,"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n""]",['']
1840,1864,0,[''],['']
1864,2021,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>  \n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div class=""guess"">\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n</div>\n      \n    </section>\n\n    <section class=""keyboard"">\n      \n    </section>\n  </body>\n</html>']"
2021,2045,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>  \n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div class=""guess"">\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n        <div class=""tile""></div>\n</div>\n      \n    </section>\n\n    <section class=""keyboard"">\n      \n    </section>\n  </body>\n</html>']",['// Example\n@forward ‘guess’;\n']
2045,2070,0,['// Example\n@forward ‘guess’;\n'],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div class=""guess"">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']"
2070,2144,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div class=""guess"">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']","[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n  }\n}""]"
2144,2148,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n  }\n}""]",['']
2148,2192,0,[''],"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}""]"
2192,2195,0,"[""@use '../util' as *;\n\nhtml {\n  font-size: 100%;\n  font-family: var(--font-body);\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem 2rem;\n  background-color: hsl(240, 3%, 7%);\n  color: hsl(0, 0%, 100%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-transform: uppercase;\n  font-weight: 600;\n}""]",['']
2195,2211,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n  }\n}\n""]"
2211,2212,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n  }\n}\n""]",['']
2212,2227,0,[''],['']
2227,2250,0,[''],['']
2250,2329,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
2329,2333,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
2333,2570,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    place-items: center;\n  }\n}\n""]"
2570,2583,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 46%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    place-items: center;\n  }\n}\n""]",['']
2583,2596,0,[''],['']
2596,2637,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    place-items: center;\n  }\n}\n""]"
2637,2644,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    place-items: center;\n  }\n}\n""]",['']
2644,2697,0,[''],['']
2697,2714,0,[''],['']
2714,2935,0,[''],['']
2935,3128,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
3128,3156,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
3156,3180,0,[''],"['console.log(\'HELLO\');\n\nconst test = () => {\n  console.log(\'this is a test\');\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']"
3180,3189,8,"['console.log(\'HELLO\');\n\nconst test = () => {\n  console.log(\'this is a test\');\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']","['\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']"
3189,3264,8,"['\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']","['// detect keypress (letter, backspace, other)\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']"
3264,3282,0,"['// detect keypress (letter, backspace, other)\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/']",['']
3282,3288,0,[''],['']
3288,3314,0,[''],['']
3314,3317,0,[''],['']
3317,3339,0,[''],['']
3339,3364,0,[''],['']
3364,3367,0,[''],['']
3367,3373,0,[''],['']
3373,3376,0,[''],['']
3376,3384,0,[''],['']
3384,3432,0,[''],['']
3432,3447,0,[''],['']
3447,3487,0,[''],['']
3487,3504,0,[''],"['// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3504,3520,0,"['// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
3520,3532,0,[''],"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3532,3549,0,"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
3549,3567,0,[''],"[""'use strict';\nconsole.log('keypress'),\n  document.addEventListener('keydown', () => {\n    console.log('keypress');\n  });\n//# sourceMappingURL=script.js.map""]"
3567,3578,0,"[""'use strict';\nconsole.log('keypress'),\n  document.addEventListener('keydown', () => {\n    console.log('keypress');\n  });\n//# sourceMappingURL=script.js.map""]",['']
3578,3601,0,[''],"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n\n  // If a letters\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3601,3623,0,"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', () => {\n  console.log(\'keypress\');\n\n  // If a letters\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
3623,3627,0,[''],['']
3627,3658,0,[''],['']
3658,3672,0,[''],"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3672,3681,0,"['console.log(\'keypress\');\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
3681,3702,0,[''],['']
3702,3714,0,[''],['']
3714,3717,0,[''],['']
3717,3734,0,[''],['']
3734,3736,0,[''],['']
3736,3753,0,[''],['']
3753,3768,0,[''],['']
3768,3770,0,[''],['']
3770,3774,0,[''],['']
3774,3795,0,[''],['']
3795,3816,0,[''],['']
3816,3819,0,[''],['']
3819,3848,0,[''],['']
3848,3936,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3936,3939,20,"['console.log(\'keypress\');\n\nconst LettersPattern = /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keyLettersPattern.test(e);\n  console.log()\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
3939,3953,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keyLettersPattern.test(e);\n  console.log()\n  \n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
3953,3967,0,[''],['']
3967,4014,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4014,4025,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
4025,4053,0,[''],['']
4053,4077,0,[''],['']
4077,4086,0,[''],['']
4086,4090,0,[''],['']
4090,4101,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4101,4108,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  let keypress = lettersPattern.test(e);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
4108,4121,0,[''],['']
4121,4128,0,[''],['']
4128,4150,0,[''],['']
4150,4162,0,[''],['']
4162,4170,0,[''],['']
4170,4173,0,[''],['']
4173,4211,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  // /[a-z]/.test(\'a\');\n  let keypress = lettersPattern.test(e.key);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4211,4221,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  // /[a-z]/.test(\'a\');\n  let keypress = lettersPattern.test(e.key);\n  console.log(keypress)\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
4221,4243,0,[''],['']
4243,4357,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  // /[a-z]/.test(\'a\');\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(isLetter)\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4357,4386,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If a letters\n  // /[a-z]/.test(\'a\');\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(isLetter)\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
4386,4398,0,[''],['']
4398,4427,0,[''],['']
4427,4506,0,[''],['']
4506,4510,0,[''],['MoO U N T\n\nSTATISTICS h\n\n2100 2 2\n\nPlayed Win% Current Max\nStreak Streak\n\nGUESS DISTRIBUTION\n\na a & WON =\noo oc0c ©&\n\nNEXT WORDLE\n\n07:48:23\n\n']
4510,4607,0,['MoO U N T\n\nSTATISTICS h\n\n2100 2 2\n\nPlayed Win% Current Max\nStreak Streak\n\nGUESS DISTRIBUTION\n\na a & WON =\noo oc0c ©&\n\nNEXT WORDLE\n\n07:48:23\n\n'],['']
4607,4612,0,[''],['']
4612,4620,0,[''],['']
4620,4622,0,[''],['']
4622,4632,0,[''],['']
4632,4636,0,[''],['']
4636,4663,0,[''],['']
4663,4668,0,[''],['']
4668,4694,0,[''],['']
4694,4712,0,[''],['']
4712,4753,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']"
4753,4822,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']",['']
4822,4927,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(isLetter)\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4927,4986,25,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(isLetter)\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4986,4997,26,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nfunction updateLetters() {\n  console.log(\'currentGuess = \' + currentGuess);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
4997,4999,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nfunction updateLetters() {\n  console.log(\'currentGuess = \' + currentGuess);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
4999,5003,0,[''],['']
5003,5007,0,[''],['']
5007,5010,0,[''],['']
5010,5042,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)  \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nfunction updateLetters() {\n  console.log(\'currentGuess = \' + currentGuess);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5042,5043,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)  \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nfunction updateLetters() {\n  console.log(\'currentGuess = \' + currentGuess);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5043,5134,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)  \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5134,5153,31,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)  \n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5153,5176,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuess = 1;\nlet currentLetters = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5176,5272,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5272,5283,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1) {\n    let isLetter = lettersPattern.test(e.key);\n    console.log(\'letter = \' + isLetter)\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5283,5352,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5352,5359,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'currentGuess = \' + currentGuess,\n    \'currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5359,5396,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentLetters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5396,5399,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentLetters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n}\n\n// Update tile markup\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5399,5442,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"" data-letters="""">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']"
5442,5451,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"" data-letters="""">\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n        <div class=""guess__tile""></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']",['']
5451,5527,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentLetters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n\n}\n\n// Update tile markup\nconst updateTiles = () =>{\n  \n}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5527,5570,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentLetters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n\n}\n\n// Update tile markup\nconst updateTiles = () =>{\n  \n}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5570,5622,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5622,5648,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentLetters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5648,5674,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentGuess.dataset.letters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5674,5687,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentGuess.dataset.letters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5687,5733,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentGuess.dataset.letters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5733,5759,36,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentGuess.dataset.letters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5759,5761,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nlet currentLetters = currentGuess.dataset.letters;\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5761,5772,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5772,5786,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  console.log(\n    \'updateLetters = \' + letters,\n    \'\\ncurrentGuess = \' + currentGuess,\n    \'\\ncurrentLetters = \' + currentLetters\n  );\n  currentGuess.dataset.letters = currentLetters + letter;\n  console.log(\'updated currentLetters = \' + currentGuess.dataset.letters);\n\n}\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5786,5840,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  currentGuess.dataset.letters = currentGuess.dataset.letters + \n  letter;\n};\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5840,5862,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  currentGuess.dataset.letters = currentGuess.dataset.letters + \n  letter;\n};\n\n// Update tile markup\nconst updateTiles = () => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5862,5862,0,[''],['']
5862,5886,0,[''],"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"" data-letters="""">\n        <div class=""guess__tile"" id=""guessTile1></div>\n        <div class=""guess__tile"" id=""guessTile2></div>\n        <div class=""guess__tile"" id=""guessTile3></div>\n        <div class=""guess__tile"" id=""guessTile4></div>\n        <div class=""guess__tile"" id=""guessTile5></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']"
5886,5962,0,"['<!DOCTYPE html>\n<html lang=""en"">\n  <head>\n    <meta charset=""UTF-8"" />\n    <meta name=""viewport” content=""width=device-width, initial-scale=1.0"" />\n    <title></title>\n    <link rel=""preconnect"" href=""https://fonts.googleapis.com"">\n    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>\n    <link\n    href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap""\n      rel=""stylesheet""\n    />\n    <link rel=""stylesheet"" href=""/dist/style.csvv"" />\n    <script defer src=""/dist/script.js""></script>\n  </head>\n  <body>\n    <h1>Wordle Clone</h1>\n    <section class=""game"">\n      <div id=""guess1"" class=""guess"" data-letters="""">\n        <div class=""guess__tile"" id=""guessTile1></div>\n        <div class=""guess__tile"" id=""guessTile2></div>\n        <div class=""guess__tile"" id=""guessTile3></div>\n        <div class=""guess__tile"" id=""guessTile4></div>\n        <div class=""guess__tile"" id=""guessTile5></div>\n      </div>\n    </section>\n\n    <section class=""keyboard"">\n\n    </section>\n  </body>\n</html>\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let letters = currentGuess.dataset.letters;\n  let tileNumber = (currentGuess.dataset.letters= letters + letter)\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5962,5971,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let letters = currentGuess.dataset.letters;\n  let tileNumber = (currentGuess.dataset.letters= letters + letter)\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
5971,5989,0,[''],['']
5989,5999,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let letters = currentGuess.dataset.letters\n  //let tileNumber =\n  currentGuess.dataset.letters = letters + letter;\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
5999,6004,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let letters = currentGuess.dataset.letters\n  //let tileNumber =\n  currentGuess.dataset.letters = letters + letter;\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6004,6054,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  currentGuess.dataset.letters = newLetters;\n  \n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6054,6058,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  currentGuess.dataset.letters = newLetters;\n  \n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6058,6100,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6100,6108,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles()\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {}\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6108,6175,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, currentGuessCount);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6175,6187,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, currentGuessCount);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6187,6205,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter)\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6205,6215,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter)\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6215,6220,0,[''],['']
6220,6267,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter)\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber)\n  ;\n  //curentTile\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6267,6268,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter)\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber)\n  ;\n  //curentTile\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6268,6271,0,[''],['']
6271,6277,0,[''],['']
6277,6288,0,[''],['']
6288,6292,0,[''],['']
6292,6311,0,[''],['']
6311,6312,0,[''],['']
6312,6336,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber)\n  ;\n  currentTile.innerText = letter;\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6336,6345,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n\n  // If keypress is string of length 1, and is a letter\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber)\n  ;\n  currentTile.innerText = letter;\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6345,6391,0,[''],['']
6391,6401,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n""]"
6401,6416,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n""]",['']
6416,6439,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n}\n""]"
6439,6452,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n}\n""]",['']
6452,6476,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
6476,6476,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
6476,6531,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  // If keypress is string of length 1, and is a letter\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n  else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6531,6538,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  // If keypress is string of length 1, and is a letter\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n  else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n}\n\n// Delete last letter\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6538,6589,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6589,6732,48,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  // If keypress is string of length 1, and is a letter\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n  else if(e.key ==\'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6732,6742,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  // If keypress is string of length 1, and is a letter\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  }\n  else if(e.key ==\'Backspace\'){\n    console.log(\'is backspace\');\n  }\n\n  // If backspace\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6742,6746,0,[''],['']
6746,6852,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6852,6860,48,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  //let newLetters = oldLetters.\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6860,6875,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6875,6960,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
6960,6975,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
6975,7021,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7021,7039,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7039,7070,0,[''],['']
7070,7091,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7091,7112,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7112,7137,0,[''],['']
7137,7154,0,[''],"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7154,7164,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (keypress.length == 1 && lettersPattern.test(e.key)) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7164,7211,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nDon\'t run update functions if ""letters"" length = 4;\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
7211,7242,6,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nDon\'t run update functions if ""letters"" length = 4;\n\nTyping in the letter will display the letter in the tile\nBackspace will delete letters\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']","['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 && \n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7242,7266,0,"['console.log(\'keypress\');\n\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 && \n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7266,7280,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
7280,7287,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\nEnter will submit guess\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
7287,7370,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nStore solution words in JSON object / array\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
7370,7464,34,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nStore solution words in JSON object / array\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']","['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
7464,7509,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
7509,7515,0,[''],['']
7515,7620,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\n\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7620,7643,60,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\n\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  \n}\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7643,7658,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  \n}\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7658,7690,0,[''],['']
7690,7696,0,[''],['']
7696,7727,0,[''],['']
7727,7753,0,[''],['']
7753,7761,0,[''],['']
7761,7814,0,[''],['']
7814,7846,0,[''],['']
7846,7859,0,[''],['']
7859,7869,0,[''],['']
7869,7881,0,[''],['']
7881,7909,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\nwords = words = words.sort(() => Math.random() - 0.5);\nconsole.log(\'words = \' + words);\n\nconst chooseWord = () => {\n  // choose random item from words array\n}\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
7909,7911,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\nwords = words = words.sort(() => Math.random() - 0.5);\nconsole.log(\'words = \' + words);\n\nconst chooseWord = () => {\n  // choose random item from words array\n}\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
7911,7916,0,[''],['']
7916,7920,0,[''],['']
7920,7951,0,[''],['']
7951,7951,0,[''],['']
7951,7954,0,[''],['']
7954,7960,0,[''],['']
7960,7976,0,[''],['']
7976,7984,0,[''],['']
7984,7989,0,[''],['']
7989,7994,0,[''],['']
7994,7998,0,[''],['']
7998,8004,0,[''],['']
8004,8046,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n};\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8046,8048,65,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n};\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n};\n\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8048,8050,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n};\n\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8050,8062,0,[''],['']
8062,8067,0,[''],['']
8067,8072,0,[''],['']
8072,8075,0,[''],['']
8075,8094,0,[''],['']
8094,8101,0,[''],['']
8101,8104,0,[''],['']
8104,8168,0,[''],['']
8168,8182,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8182,8186,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'apple\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8186,8189,0,[''],['']
8189,8230,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8230,8237,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  words = words = words.sort(() => Math.random() - 0.5);\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8237,8252,0,[''],['']
8252,8255,0,[''],['']
8255,8286,0,[''],['']
8286,8349,0,[''],['']
8349,8370,0,[''],['']
8370,8428,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8428,8429,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  console.log(\'words = \' + words);\n  let solutionWord = words[0];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8429,8484,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\n//chooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8484,8485,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\n//chooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8485,8488,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8488,8493,69,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nconsole.log(words.length);\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8493,8511,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  //Math.floor(Math.random() * 3) + 1\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  console.log(\'words = \' + words);\n  let solutionWord = words[randomItem];\n  console.log(\'solution word = \' + solutionWord);\n};\n\nchooseWord();\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8511,8525,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8525,8527,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8527,8542,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8542,8544,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8544,8577,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
8577,8597,38,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nPressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']","['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\n- Pressing Enter will submit guess\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
8597,8597,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\n- Pressing Enter will submit guess\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']",['']
8597,8604,0,[''],['']
8604,8613,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8613,8675,68,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8675,8691,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8691,8710,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']"
8710,8823,6,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  \n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8823,8841,74,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  \n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8841,8861,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter();\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
8861,8870,0,[''],['']
8870,8879,0,[''],['']
8879,8883,0,[''],['']
8883,8924,0,[''],['']
8924,8937,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
8937,9007,75,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9007,9043,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9043,9054,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9054,9060,79,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9060,9084,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    checkLetter(0);\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9084,9088,0,[''],['']
9088,9123,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9123,9147,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9147,9162,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9162,9180,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9180,9251,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9251,9286,84,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9286,9299,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9299,9303,0,[''],['']
9303,9310,0,[''],['']
9310,9348,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9348,9364,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9364,9374,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9374,9401,87,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9401,9421,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9421,9441,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9441,9447,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9447,9526,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n  \n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9526,9544,94,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n  \n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9544,9578,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(position);\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    console.log(\'correct\');\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9578,9611,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9611,9621,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9621,9656,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      //console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9656,9669,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      //console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9669,9678,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9678,9704,93,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9704,9717,93,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9717,9727,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9727,9737,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9737,9754,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9754,9789,0,[''],['']
9789,9802,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9802,9825,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      checkLetter(i);\n      console.log(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9825,9893,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9893,9915,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9915,9918,0,[''],['']
9918,9931,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status)\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9931,9934,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status)\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9934,9936,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    \n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9936,9937,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    \n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9937,9948,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\'\n\n    case \'present\'\n\n    case \'absent\'\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9948,9952,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\'\n\n    case \'present\'\n\n    case \'absent\'\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
9952,9969,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\':\n\n    case \'present\':\n\n    case \'absent\':\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
9969,9998,6,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\':\n\n    case \'present\':\n\n    case \'absent\':\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    \n  }\n\n  .present {\n\n  }\n\n  .absent {\n    \n  }\n}\n""]"
9998,10026,23,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    \n  }\n\n  .present {\n\n  }\n\n  .absent {\n    \n  }\n}\n""]","[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(51, 100%, 29%);\n  }\n\n  .absent {\n\n  }\n}\n""]"
10026,10033,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(51, 100%, 29%);\n  }\n\n  .absent {\n\n  }\n}\n""]",['']
10033,10037,0,[''],['']
10037,10070,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(49, 51%, 47%);\n  }\n\n  .absent {\n    .background-color : hsl(0, 0%, 35%);\n  }\n}\n""]"
10070,10111,5,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(49, 51%, 47%);\n  }\n\n  .absent {\n    .background-color : hsl(0, 0%, 35%);\n  }\n}\n""]","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\':\n\n    case \'present\':\n\n    case \'absent\':\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10111,10209,100,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (status) => {\n  switch(status){\n    case \'correct\':\n\n    case \'present\':\n\n    case \'absent\':\n  }\n}\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10209,10319,105,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10319,10327,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10327,10351,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10351,10365,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList = classList + \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10365,10393,0,[''],['']
10393,10428,0,[''],['']
10428,10436,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10436,10436,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList = classList + \'present\';\n    case \'absent\':\n      tile.classList = classList + \'absent\';\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10436,10466,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10466,10502,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i + status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10502,10527,0,[''],['']
10527,10549,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10549,10559,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  console.log(tile);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10559,10564,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10564,10574,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  switch(status){\n    case \'correct\':\n      tile.classList.add \'correct\';\n    case \'present\':\n      tile.classList.add(\'present\');\n    case \'absent\':\n      tile.classList.add(\'absent\');\n  }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10574,10639,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  if (status == \'correct\') {\n    tile.classList.add(\'correct\');\n  } else if (status == \'present\') {\n    tile.classList.add(\'present\');\n  } else if (status == ‘absent\') {\n    tile.classList.add(\'‘absent\');\n  }\n  // switch (status) {\n  // case ‘correct’:\n  // case ‘present’:\n  // case ‘absent’:\n  // }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10639,10649,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  if (status == \'correct\') {\n    tile.classList.add(\'correct\');\n  } else if (status == \'present\') {\n    tile.classList.add(\'present\');\n  } else if (status == ‘absent\') {\n    tile.classList.add(\'‘absent\');\n  }\n  // switch (status) {\n  // case ‘correct’:\n  // case ‘present’:\n  // case ‘absent’:\n  // }\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10649,10682,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  if (status == \'correct\') {\n    tile.classList.add(\'correct\');\n  } else if (status == \'present\') {\n    tile.classList.add(\'present\');\n  } else if (status == ‘absent\') {\n    tile.classList.add(\'‘absent\');\n  }\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
10682,10703,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, status) => {\n  console.log(\'revealTile = \' + i, status);\n  let tileNum = i + 1;\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n\n  if (status == \'correct\') {\n    tile.classList.add(\'correct\');\n  } else if (status == \'present\') {\n    tile.classList.add(\'present\');\n  } else if (status == ‘absent\') {\n    tile.classList.add(\'‘absent\');\n  }\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
10703,10726,0,[''],"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n    .border-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(49, 51%, 47%);\n    .border-color : hsl(49, 51%, 47%);\n  }\n\n  .absent {\n    .background-color : hsl(0, 0%, 35%);\n    .border-color : hsl(0, 0%, 35%);\n  }\n}\n""]"
10726,10733,0,"[""@use '../util' as *;\n\n.guess {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: rem(3);\n  width: rem(300);\n\n  &__tile {\n    border: rem(2) solid hsl(0, 0%, 26%);\n    width: rem(52);\n    height: rem(52);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: rem(32);\n    font-weight: 600;\n  }\n\n  .correct {\n    .background-color : hsl(120, 100%, 28%);\n    .border-color : hsl(120, 100%, 28%);\n  }\n\n  .present {\n    .background-color : hsl(49, 51%, 47%);\n    .border-color : hsl(49, 51%, 47%);\n  }\n\n  .absent {\n    .background-color : hsl(0, 0%, 35%);\n    .border-color : hsl(0, 0%, 35%);\n  }\n}\n""]",['']
10733,10751,0,[''],['']
10751,10762,0,[''],['']
10762,10805,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n- Slight delay between each tile flipping\n']"
10805,10827,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n- Slight delay between each tile flipping\n']",['']
10827,10872,0,[''],"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n- Slight delay between each tile flipping\n- Background color changes when tile is flat, i.e. can\'t see it\n']"
10872,10886,0,"['# Functional Requirements\n\n## Gameplay\n\n6 tries to guess a 5-letter word\n\n### Pick a solution word\n\nx Store solution words in array\nx When game is loaded, choose random item from array\nx Set solution to that word\n\n### Making a guess\n\nDetect keypresses\n\nx if keypress is a letter\nx update ""letters"" attribute\nx update tile markup based on ""letters"" value\n\nx if keypress is backspace\nx delete last letter in “letters”\nx update tile markup based on ""letters""\n\nx Don\'t run update functions if ""letters"" length = 4;\n\n### Submit guess\n\nx Pressing Enter will submit guess\n\n- compare each letter with the corresponding letter in solution word\n- update the state/color of the letter\n- If all letters are “correct” / green, game is won\n\nGuesses must be a real word, “in word list”\n\nGuess colors (data-state):\n\n- gray: “absent,” letter not in word\n- yellow: ""present,"" letter in word, but in wrong position\n- green: ""correct,"" letter in word and in right position\n\nHard Mode: present or correct letters must be used in subsequent guesses\n\nGuesses are saved in Local Storage\n\n## Design\n\nTiles 5x6\nVirtual keyboard\n\n## Interactions\nWhen typing a letter:\n\n- border of the tile changes to light gray\n- blinking in animation with letter\n- backspace will remove letter, border changes back to dark gray\n\nWhen submitting guess:\n\n- Tiles will flip up and background color will change based on guess\n- Slight delay between each tile flipping\n- Background color changes when tile is flat, i.e. can\'t see it\n']",['']
10886,10894,0,[''],['']
10894,10900,0,[''],['']
10900,10992,0,[''],['']
10992,11033,0,[''],['']
11033,11095,0,[''],['']
11095,11207,0,[''],['']
11207,11222,0,[''],['']
11222,11232,0,[''],['']
11232,11274,0,[''],['']
11274,11306,0,[''],['']
11306,11320,0,[''],['']
11320,11328,0,[''],['']
11328,11355,0,[''],['']
11355,11401,0,[''],['']
11401,11505,0,[''],['']
11505,11562,0,[''],['']
11562,11566,0,[''],['']
11566,11631,0,[''],['']
11631,11635,0,[''],['']
11635,11693,0,[''],['@forward ‘breakpoints’;\n@forward ‘functions’;\n@forward ‘animations’;\n']
11693,11758,0,['@forward ‘breakpoints’;\n@forward ‘functions’;\n@forward ‘animations’;\n'],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n']
11758,11760,0,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n'],['']
11760,11816,0,[''],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 500ms;\n}\n\n.flip-out {\n  animation: flip-out 500ms;\n}']
11816,11851,0,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 500ms;\n}\n\n.flip-out {\n  animation: flip-out 500ms;\n}'],['']
11851,11881,0,[''],['']
11881,11900,0,[''],['']
11900,11904,0,[''],['']
11904,12083,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12083,12108,111,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n};\n\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(\'state\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12108,12127,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(\'state\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12127,12142,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12142,12148,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12148,12168,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12168,12179,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12179,12216,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12216,12225,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']","['Q Search HTML\n\n~ <section class=""game"">\n\nwv <div id=""guessi"" class=""guess"" data-letters=""hor\ngrid\n\n>» <div id=""guessTile2"" class=""guess_tile flip-i\n\nCes \\\n\neae a a\n\n<€ .game > div#guess1.guess > div#quessTile1.guess_tile.flip-in.a\n\n(7 Rules Layout Computed Changes Fonts\nV/ Filter Styles thov .cls + eS\n\ne a\n\nW Y Filter Output\n\nErrors Warnings Logs Info Debug CSS XHR_ Reque:\n\ntovTeawz~brsasewe T= 42 AVOTIIL aul a2pe- jo\nrevealTile = 3 absent script.js\n\nrevealTile = 4 correct script.js\n']"
12225,12235,0,"['Q Search HTML\n\n~ <section class=""game"">\n\nwv <div id=""guessi"" class=""guess"" data-letters=""hor\ngrid\n\n>» <div id=""guessTile2"" class=""guess_tile flip-i\n\nCes \\\n\neae a a\n\n<€ .game > div#guess1.guess > div#quessTile1.guess_tile.flip-in.a\n\n(7 Rules Layout Computed Changes Fonts\nV/ Filter Styles thov .cls + eS\n\ne a\n\nW Y Filter Output\n\nErrors Warnings Logs Info Debug CSS XHR_ Reque:\n\ntovTeawz~brsasewe T= 42 AVOTIIL aul a2pe- jo\nrevealTile = 3 absent script.js\n\nrevealTile = 4 correct script.js\n']","['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12235,12252,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12252,12261,0,[''],['']
12261,12276,0,[''],['']
12276,12293,0,[''],['']
12293,12296,0,[''],['']
12296,12321,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout()\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12321,12325,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout()\n  tile.classList.add(state);\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12325,12328,0,[''],['']
12328,12359,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500ms)\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12359,12362,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500ms)\n  tile.classList.remove(\'flip-in\').add(\'flip-out\');\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12362,12392,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\').add(\'flip-out\');\n  }, 1000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12392,12431,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\').add(\'flip-out\');\n  }, 1000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12431,12476,0,[''],['']
12476,12508,0,[''],['']
12508,12595,0,[''],['']
12595,12619,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 2000);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n  }, 4000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12619,12632,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 2000);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n  }, 4000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12632,12641,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 2000);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 4000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12641,12656,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 2000);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 4000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12656,12666,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 1000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12666,12683,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 500);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 1000);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12683,12705,0,[''],['']
12705,12708,0,[''],['']
12708,12730,0,[''],['']
12730,12759,0,[''],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 500ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 500ms;\n  animation-fill-mode: forwards;\n}\n']
12759,12767,0,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 500ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 500ms;\n  animation-fill-mode: forwards;\n}\n'],['']
12767,12777,0,[''],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 250ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 250ms;\n  animation-fill-mode: forwards;\n}\n']
12777,12786,8,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 250ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 250ms;\n  animation-fill-mode: forwards;\n}\n'],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 500);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12786,12795,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 500);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12795,12806,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 100);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 200);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12806,12815,4,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 100);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 200);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 100ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 100ms;\n  animation-fill-mode: forwards;\n}\n']
12815,12827,24,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 100ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 100ms;\n  animation-fill-mode: forwards;\n}\n'],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n']
12827,12829,8,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n'],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 200);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 400);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12829,12839,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 200);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 400);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12839,12859,0,[''],['']
12859,12875,0,[''],['']
12875,12888,0,[''],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-89deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-89deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n']
12888,12905,0,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-89deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-89deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n'],['']
12905,12908,0,[''],['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n']
12908,12932,8,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 200ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 200ms;\n  animation-fill-mode: forwards;\n}\n'],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 200);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 200);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12932,12938,0,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 200);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 200);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['']
12938,12949,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 250);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
12949,12955,4,"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      revealTile(i, checkLetter(i));\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 250);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']",['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 250ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 250ms;\n  animation-fill-mode: forwards;\n}\n']
12955,12961,0,['@keyframes flip-in {\n  from {\n    transform: rotateX(0deg);\n  }\n  to {\n    transform: rotateX(-90deg);\n  }\n}\n\n@keyframes flip-out {\n  from {\n    transform: rotateX(-90deg);\n  }\n  to {\n    transform: rotateX(0deg);\n  }\n}\n\n.flip-in {\n  animation: flip-in 250ms;\n  animation-fill-mode: forwards;\n}\n\n.flip-out {\n  animation: flip-out 250ms;\n  animation-fill-mode: forwards;\n}\n'],['']
12961,12969,0,[''],['']
12969,13031,0,[''],"['console.log(\'keypress\');\nconst LettersPattern = /[a-zA-Z]/ // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\'#guess\' + currentGuess);\nconst words = [\'apple\', \'baker\', \'store\', \'horse\', \'speak\', \'clone\', \'bread\'];\nlet solutionWord = \'\';\n\nconst chooseWord = () => {\n  // choose random item from words array\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\n  let solutionWord = words[randomItem];\n};\n\nchooseWord();\nconsole.log(\'solution word = \' + solutionWord);\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\'keydown\', (e) => {\n  //console.log(\'keypress: \' + e.key);\n  let keypress = e.key;\n  if (\n    keypress.length == 1 &&\n    lettersPattern.test(e.key) &&\n    currentGuess.dataset.letters.length < 5\n  ) {\n    //console.log(\'is letter\')\n    updateLetters(keypress);\n  } else if(e.key == \'Backspace\' && currentGuess.dataset.letters != \'\'){\n    //console.log(\'is backspace\');\n    deleteFromLetters();\n  } else if (e.key == \'Enter\' && currentGuess.dataset.letters.length == 5) {\n    console.log(\'submit guess\');\n    for (let i = 0; i < 5; i ++) {\n      setTimeOut(() => {\n        revealTile(i, checkLetter(i));\n      }, i * 200);\n    }\n  }\n});\n\n// Update ""letters""\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log(\'currentTile = \' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log(\'updateTiles(\' + tileNumber, letter + \')\');\n  let currentTile = document.querySelector(\'#guessTile\' + tileNumber);\n  currentTile.innerText = letter;\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = document.querySelector(\'#currentGuess.dataset.letters\');\n  console.log(\'oldLetters = \' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  console.log(\'newLetters = \' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length + 1);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = () => {\n  //remove markup from last tile\n  //console.log(\'deleteFromTiles = \' + tileNumber);\n  document.querySelector(\'#guessTile\' + tileNumber).innerText = \'\';\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log(\'checkLetter\');\n  let guessedLetter = curentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return ""correct""\n  if(guessedLetter == solutionLetter){\n    return \'correct\';\n  }\n  // If not a match, if letter exists in solution word, return ""present""\n  else {\n    return checkLetterExists(guessedLetter) ? \'present\' : \'absent\';\n  }\n\n  // If not a match, if letter doesn\'t exist in solution, return ""absent""\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  console.log(\'revealTile = \' + i, state);\n  let tileNum = i + 1;\n  //let tile = document.querySelector(\'#guessTile\' + tileNum);\n  //\n  //if (status == \'correct\') {\n  //  tile.classList.add(\'correct\');\n  //} else if (status == \'present\') {\n  //  tile.classList.add(\'present\');\n  //} else if (status == ‘absent\') {\n  //  tile.classList.add(\'‘absent\');\n  //}\n\n  flipTile(tileNum, state);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\'#guessTile\' + tileNum);\n  tile.classList.add(\'flip-in\');\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\'flip-in\');\n    tile.classList.add(\'flip-out\');\n  }, 250);\n};\n/*\n- if keypress is a letter\n  - update ""letters"" attribute\n    - update tile markup based on ""letters"" value\n- if keypress is backspace\n  - delete last letter in “letters”\n    - update tile markup based on ""letters""\n*/\n']"
